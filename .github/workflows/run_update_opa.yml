name: 0Update OPA executable version

on:
  workflow_dispatch:

jobs:
  update-opa-dependency:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write 
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine if OPA update is required
        id: determine-update-required
        continue-on-error: true
        shell: powershell
        run: |
          $UpdateRequired = $false
          $LatestOPAVersion = Invoke-RestMethod -Uri "https://api.github.com/repos/open-policy-agent/opa/releases/latest" | Select-Object -ExpandProperty tag_name
          $LatestOPAVersion = $LatestOPAVersion -replace "v", ""
          
          # Check if there is already an update branch
          $OPAVersionBumpBranch = "opa-version-bump-$($LatestOPAVersion)"     
          $Temp = git ls-remote --exit-code --heads origin $OPAVersionBumpBranch
          $OPAVersionBranchExists = $false
          Write-Host "why does my last exit code fail"
          if ($LASTEXITCODE -eq 0) { 
            $OPAVersionBranchExists = $true 
            Write-Host $OPAVersionBranchExists
          } 

          # Check if our current OPA version is outdated
          $OPAVersionPath = '.\PowerShell\ScubaGear\Modules\Support\Support.psm1'
          $OPAVerRegex = "\'\d+\.\d+\.\d+\'"
          $ExpectedVersionPattern = "ExpectedVersion = $OPAVerRegex"
          $SupportModule = Get-Content $OPAVersionPath -Raw
          
          # Find our current OPA version using some dirty string
          # manipulation
          $CurrentOPAVersion = '0.0.0'
          if ($SupportModule -match $ExpectedVersionPattern) {
              $CurrentOPAVersion = ($Matches[0] -split "=")[1] -replace " ", ""
              $CurrentOPAVersion = $CurrentOPAVersion -replace "'", ""
          }

          if (($LatestOPAVersion -gt $CurrentOPAVersion) -and (-not $OPAVersionBranchExists)) {
            $UpdateRequired = $true
          }


          if ($UpdateRequired) {
            Write-Output "OPA version update required."
          }
          else {
            Write-Output "OPA version update is not required. Update branch already exists or OPA version already up to date."
          }
          Write-Output "Current ScubaGear default OPA Version: v$($CurrentOPAVersion) Latest OPA version: v$($LatestOPAVersion)"

          echo latestopaversion=$LatestOPAVersion >> $env:GITHUB_OUTPUT
          echo opaversionbumpbranch=$OPAVersionBumpBranch >> $env:GITHUB_OUTPUT
          echo updaterequired=$UpdateRequired >> $env:GITHUB_OUTPUT
          echo currentopaversion=$CurrentOPAVersion >> $env:GITHUB_OUTPUT
          
          # Note that git-ls will always fail with exit code 1 when the branch does not exist. 
          # Setting exit 0 (success) at the end of this workflow to prevent that error
          exit 0
      - name: Update OPA version in ScubaGear
        id: update-opa-version
        if: steps.determine-update-required.outputs.updaterequired == 'true'
        run: |
          $LatestOPAVersion = "${{ steps.determine-update-required.outputs.latestopaversion }}"
          $CurrentOPAVersion = "${{ steps.determine-update-required.outputs.currentopaversion }}"

          $MAXIMUM_VER_PER_LINE = 8 # Max versions allowed in one line of acceptable versions
          $END_VERSIONS_COMMENT = "# End Versions" # EOL comment in the PowerShell file
          
          $OPAVersionPath = '.\PowerShell\ScubaGear\Modules\Support\Support.psm1'
          $OPAVerRegex = "\'\d+\.\d+\.\d+\'"
          $ExpectedVersionPattern = "ExpectedVersion = $OPAVer"
          $EndAcceptableVerRegex = ".*$END_VERSIONS_COMMENT"
          $Replace = $false # replace the current version or not

          (Get-Content -Path $OPAVersionPath) | ForEach-Object {
              $ExpectedVerMatch = $_ -match "ExpectedVersion = "
              $EndAcceptableVarMatch = $_ -match $EndAcceptableVerRegex
              
              # Match on and replace default value of the "ExpectedVersion" parameter
              if ($ExpectedVerMatch -and ($LatestOPAVersion -gt $CurrentOPAVersion)) {
                  $_ -replace $OPAVerRegex, "'$LatestOPAVersion'"
                  $Replace = $true
              }
              elseif ($EndAcceptableVarMatch -and $Replace) {
                  # match on "AcceptableVersion" variable
                  $VersionsLength = ($_ -split ",").length

                  # Split the line if we reach our version limit per line
                  # in the the file. This is to prevent long lines.
                  if ($VersionsLength -gt $MAXIMUM_VER_PER_LINE) {
                      $VersionsArr = $_ -split "#"

                      # Create a new line
                      # Then add the new version on the next line
                      ($VersionsArr[$VersionsArr.length - 2]).TrimEnd()
                      "    '$LatestOPAVersion' $END_VERSIONS_COMMENT" # 4 space indentation
                  }
                  else {
                      $VersionsArr = $_ -split "#"
                      $NewVersions = $VersionsArr[0..($VersionsArr.Length-2)] -join ","
                      $NewVersions + "'$LatestOPAVersion' $END_VERSIONS_COMMENT"
                  }
              }
              else {
                  $_
              }
          } | Set-Content $OPAVersionPath
      - name: Create PR Body Content
        id: create-pr-body
        if: steps.determine-update-required.outputs.updaterequired == 'true'
        run: |
          $LatestOPAVersion = "${{ steps.determine-update-required.outputs.latestopaversion }}"
          $PRTemplatePath = '.\.github\pull_request_template.md'

          $Description = '<!-- Describe the "what" of your changes in detail. -->'
          $Motivation = '<!-- Why is this change required\? -->'
          $Testing = '<!-- see how your change affects other areas of the code, etc. -->'
          $RemoveHeader = '# <!-- Use the title to describe PR changes in the imperative mood --> #'
          
          $NewDescription = "- This PR was create by a GitHub Action to bump ScubaGear's Open Policy Agent (OPA) executable version dependency.`n - Please fill out the rest of the template that the Action did not cover. `n"
          $NewMotivation = "- Bump to the latest OPA version v$($LatestOPAVersion) `n"
          $NewTesting = "- Currently a human should still check bumping the OPA version affects ScubaGear.`n"

          $Body = "This is a test body fear me"
          $PRTemplateContent = (Get-Content -Path $PRTemplatePath) | ForEach-Object {
            $DescriptionRegex = $_ -match $Description
            $MotivationRegex = $_ -match $Motivation
            $TestingRegex = $_ -match $Testing
            $RemoveHeaderRegex = $_ -match $RemoveHeader # removes unneeded new line
            if ($DescriptionRegex) {
                  $_ -replace $Description, $NewDescription
            } 
            elseif ($MotivationRegex) {
                  $_ -replace $Motivation, $NewMotivation
            } 
            elseif ($TestingRegex) {
                $_ -replace $Testing, $NewTesting
            }
            elseif ($RemoveHeaderRegex) {
              $_ -replace $RemoveHeader, ""
            }
            else {
                  $_ + "`n"
                }
          }
          echo prtemplatecontent=$PRTemplateContent >> $env:GITHUB_OUTPUT           
      - name: Create the OPA update PR
        if: steps.determine-update-required.outputs.updaterequired == 'true'
        run: |
          $LatestOPAVersion = "${{ steps.determine-update-required.outputs.latestopaversion }}"
          $CurrentOPAVersion = "${{ steps.determine-update-required.outputs.currentopaversion }}"
          $OPAVersionBumpBranch = "${{ steps.determine-update-required.outputs.opaversionbumpbranch }}" 
          $PRBody = "${{ steps.create-pr-body.outputs.prtemplatecontent }}
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git checkout -b "$($OPAVersionBumpBranch)"
          git add .
          git commit -m "Update OPA version from v$($CurrentOPAVersion) to  v$($LatestOPAVersion)"
          git push origin $OPAVersionBumpBranch
          gh pr create -B main -H $OPAVersionBumpBranch --title "Bump OPA version from v$($CurrentOPAVersion) to v$($LatestOPAVersion)" --body "${PRBody}" --label "version bump"